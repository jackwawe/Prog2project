

import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;

public class GameGui extends javax.swing.JFrame {

    static ArrayList<String> Player = new ArrayList<>(); //to hold the player's cards
    static ArrayList<String> Computer = new ArrayList<>();//to hold the computer's cards
    static int playerCardsWon = 0; //tracks number of cards won by player in war game
    static int computerCardsWon = 0; //tracks number of cards won by computer in wargame
    static int roundCounter = 1;    //keeps track of how man rounds have been played
    static int playerScore = 0; //Keeps player score 
    static int dealerScore = 0; //Keeps dealer score
    static ScoreBoard sb;
    static char answer;         //Stores players answer
    static boolean startWarDisabled; // switch to  allow us to use same methods for different action/button calls;
    static boolean blackJackDisabled; // switch to  allow us to use same methods for different action/button calls;
    static boolean drawCardVisible=false;
    

    public GameGui() {
        initComponents();
        
        //Hide overlaid control buttons
        drawCard.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        computerOne = new java.awt.Label();
        startWar = new java.awt.Button();
        playerOne = new java.awt.Label();
        playWar = new javax.swing.JToggleButton();
        computerCardCount = new java.awt.Label();
        playerOneCardCount = new java.awt.Label();
        computerCard = new java.awt.Label();
        playerOneCard = new java.awt.Label();
        mainDisplay = new java.awt.Label();
        blackJack = new java.awt.Button();
        drawCard = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WAR AND BLACK JACK");

        computerOne.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        computerOne.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                computerOneComponentHidden(evt);
            }
        });

        startWar.setFont(new java.awt.Font("Lucida Sans Typewriter", 1, 14)); // NOI18N
        startWar.setLabel("War Game");
        startWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startWarActionPerformed(evt);
            }
        });

        playerOne.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        playerOne.setName(""); // NOI18N

        playWar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        playWar.setText("Play");
        playWar.setEnabled(false);
        playWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playWarActionPerformed(evt);
            }
        });

        computerCardCount.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        playerOneCardCount.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        computerCard.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        mainDisplay.setFont(new java.awt.Font("Lucida Handwriting", 2, 24)); // NOI18N

        blackJack.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        blackJack.setFont(new java.awt.Font("Lucida Sans Typewriter", 1, 14)); // NOI18N
        blackJack.setLabel("Black Jack");
        blackJack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackJackActionPerformed(evt);
            }
        });

        drawCard.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        drawCard.setText("Draw Card");
        drawCard.setToolTipText("");
        drawCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerOne, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(blackJack, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(startWar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(104, 104, 104))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(computerOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(drawCard, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(playerOneCardCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(playWar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(playerOneCard, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                                        .addGap(209, 209, 209))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(computerCardCount, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(computerCard, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 310, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(mainDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(computerOne, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computerCardCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(startWar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blackJack, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(playerOneCard, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerOneCardCount, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(drawCard, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(playerOne, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(computerCard, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(mainDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playWar)
                        .addContainerGap())))
        );

        startWar.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startWarActionPerformed
     
        if (startWarDisabled) {  //if wargame is disabled, start black jack code
            computerOne.setText("Dealer");
            playerOne.setText("YOU");
            playerScore = 0;
            dealerScore = 0;
            playWar.setEnabled(rootPaneCheckingEnabled);

            
        } else { //Start wargame
            
           blackJack.setEnabled(false); // Disable blackJack button
           blackJackDisabled = true;   //Turn on switch to mark it as such
           
           //Start war game
           
            computerOne.setText("CPU");
            playerOne.setText("YOU");

            Deck D = new Deck();//create a deck
            //Deal Cards
            int count = 0;
            for (int i = 0; i < D.theDeck.length; i++) {
                if (i % 2 == 0)//even numbers
                {
                    Player.add(D.theDeck[i]);
                    count++;
                } else {//odd numbers
                    Computer.add(D.theDeck[i]);
                    computerCardCount.setText(count + " Cards delt");
                    playerOneCardCount.setText(count + " Cards delt");
                }

            }
            playWar.setEnabled(rootPaneCheckingEnabled);
        }

    }//GEN-LAST:event_startWarActionPerformed

    private void computerOneComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_computerOneComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_computerOneComponentHidden

    private void playWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playWarActionPerformed
       
        playWar.setEnabled(false);  //Disable play button while game in progress

        if (blackJackDisabled) {  //if blackJack disabled, execute code for wargame

            while (Player.size() > 0 && Computer.size() > 0) {
                showPlayerCard();//flip the first index of players arraylist
                showComputerCard();//flip the first index of computers arraylist
                delay(1);
                resolvePlay();// see who wins, and swap cards
                playWar.resetKeyboardActions();

            }

            if (Player.isEmpty()) {// player lost
                mainDisplay.setText("Sorry! Computer won the War!");
                playerOneCardCount.setText(ScoreBoard.printComputerWarScore());

            } else {//computer lost
                mainDisplay.setText("You won the War!");
                playerOneCardCount.setText(ScoreBoard.printPlayerWarScore());
                
            }
        } else { //Execute code for black jack//////////////////////////////////////////////////////////////////////////////////////////////////////
            // Player's turn. Two cards are given to the Player.

            drawCard.setVisible(false);
            mainDisplay.setText("Player's turn. Two cards are drawn.");
            delay(2);
            playerScore = playerDistribution();
            mainDisplay.setText("Your score is  " + playerScore);
            delay(2);
            
            // Dealer's turn. Two cards are given to the Dealer: one face-up and one face-down.             
            mainDisplay.setText("Dealer's turn.Two cards drawn: ");
            delay(2);
            dealerScore = dealerDistribution();
            mainDisplay.setText("The Dealer's score is " + dealerScore );
            delay(2);
            //Asking if the player wants to continue the game
            drawCard.setVisible(true);
            
            
            
        }

    }//GEN-LAST:event_playWarActionPerformed

    private void blackJackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackJackActionPerformed
      startWar.setEnabled(false); //Disable war button
      startWarDisabled = true;    // allows us to use same  wargame buttons for black jack
      startWarActionPerformed(evt);
    }//GEN-LAST:event_blackJackActionPerformed

    private void drawCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCardActionPerformed
       
        //public static int newCardProcess(int score, char answer) 

        int currentScore = playerScore;   
        while ( currentScore <= 21) {
            currentScore = drawNewCard(currentScore);
            if ( currentScore > 21) {
                mainDisplay.setText("The Player loses.");
              
            } else if ( currentScore == 21 ) {
                mainDisplay.setText("The Player's score reaches 21.");
              
            } else {
               drawCard.setVisible(true);
               drawCard.resetKeyboardActions();
            }
        }
        mainDisplay.setText("The Player's final score is " + currentScore + ".");
        drawCard.setVisible(false);
       
    
    }//GEN-LAST:event_drawCardActionPerformed
   public  int points (int score, String card) {

        int earnedPoints = 0;
        if ("Ace".equals(card) && score < 11) {

            mainDisplay.setText("Which value do you want to assign to your Ace: 1 or 11?");
            
            String input = JOptionPane.showInputDialog(null,"Enter: 1 or 11?");
            
            int Answer =parseInt(input);

            switch (Answer) {
                case 1:
                    earnedPoints = 1;
                    mainDisplay.setText("1 point is earned.");
                    break;

                case 11:
                    mainDisplay.setText("11 points are earned.");
                    break;

                default:
                    mainDisplay.setText("Your answer is not valid! 11 points are earned.");
                    earnedPoints = 11;
                    break;
            }

        } else if ("10".equals(card) || "Jack".equals(card) || "Queen".equals(card) || "King".equals(card)) {

                earnedPoints = 10;
                mainDisplay.setText("10 points are earned.");
        } else if ("Ace".equals(card) && score >= 11) {

                earnedPoints = 1;
                mainDisplay.setText("1 point is earned.");
        } else {

            earnedPoints = Integer.parseInt(card);
            mainDisplay.setText(card + " points are earned.");
        }
        return earnedPoints;
    }
    public int drawNewCard(int score) {

        playerScore = score;
        String newCard = playGame("faceUp");
        int earnedPoints = points(playerScore, newCard);
        playerScore += earnedPoints;
        mainDisplay.setText("The new score is " + playerScore + ".");
        return playerScore;
    }
     public  int playerDistribution() {

        
        //System.out.println("Player's turn. Two cards are drawn.");
        String playerCard1 = playGame("faceUp");
        playerScore = points(playerScore, playerCard1);
        String playerCard2 = playGame("faceUp");
        playerScore += points(playerScore, playerCard2);
        //System.out.println("The Player's score is " + playerScore + ".\n");
        return playerScore;
    }
     public  int dealerDistribution() {

         
        //System.out.println("Dealer's turn. Two cards are drawn: one face-up and one face-down.");
        
        String dealerCardFaceUp = playGame("faceUp");
        dealerScore = points(dealerScore, dealerCardFaceUp);
        String dealerCardFaceDown = playGame("faceDown");
        //System.out.println("The Dealer's score is " + dealerScore + ".\n");
        String[] tab = new String[3];
        tab[0] = dealerCardFaceUp;
        tab[1] = dealerCardFaceDown;
        tab[2] = String.valueOf(dealerScore);
       
        return dealerScore;
    }
     public  String playGame (String face) {

        String cards[] = {"Ace","2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"};
        Random r = new Random();
        int randomIndex = r.nextInt(13);
        String drawnCard = cards[randomIndex];
        if ("faceUp".equals(face)) {

            if ("Ace".equals(drawnCard)) {

                mainDisplay.setText("An Ace was drawn.");                               
            } else {

                mainDisplay.setText("A " + drawnCard + " was drawn.");
            }
        } else if ("faceDown".equals(face)) {

                mainDisplay.setText("A face-down card was drawn.");
            }        
        return drawnCard;  
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameGui().setVisible(true);
            }
        });
    }

    public void showPlayerCard() {
        playerOneCard.setText("    You played : " + Player.get(0));

    }

    public void showComputerCard() {
        computerCard.setText("Computer played : " + Computer.get(0));
    }

    public void resolvePlay() {

        if (determineValue(Player.get(0)) > determineValue(Computer.get(0))) {
            mainDisplay.setText(" You win  " + "Round " + roundCounter);
            roundCounter++;
            //Player.add(Computer.get(0));
            Player.add(Player.get(0));
            Computer.remove(0);
            Player.remove(0);
            playerCardsWon++;

        } else if (determineValue(Player.get(0)) < determineValue(Computer.get(0))) {
            mainDisplay.setText("Computer wins " + "Round " + roundCounter);
            roundCounter++;
            //Computer.add(Player.get(0));
            Computer.add(Computer.get(0));
            Player.remove(0);
            Computer.remove(0);
            computerCardsWon++;

        } else {
            resolveTie();// see below

        }
        playerOneCardCount.setText(Player.size() + " Cards in hand");
        computerCardCount.setText(Computer.size() + " Cards in hand");

    }

    public void resolveTie() {
        mainDisplay.setText("A TIE! This means WAARR!!");
        delay(3);
        mainDisplay.setText("Three cards down, flipping the fourth...");
        delay(3);
        if (Player.size() <= 3) {
            mainDisplay.setText("not enough for War, game called.");
            delay(3);
            Player.clear();
            return;
        } else if (Computer.size() <= 3) {
            mainDisplay.setText("not enough for War, game called.");
            delay(3);
            Computer.clear();
            return;
        }
        playerOneCard.setText("player played: " + Player.get(3));
        computerCard.setText("Computer played: " + Computer.get(3));
        delay(1);
        if (determineValue(Player.get(3)) > determineValue(Computer.get(3))) {
            mainDisplay.setText("You won the tie");
            delay(2);
            Player.add(Computer.get(0));
            Player.add(Computer.get(1));
            Player.add(Computer.get(2));
            Player.add(Computer.get(3));
            Computer.remove(0);
            Computer.remove(0);
            Computer.remove(0);
            Computer.remove(0);
        } else {
            mainDisplay.setText("Computer Won the tie");
            delay(2);
            Computer.add(Player.get(0));
            Computer.add(Player.get(1));
            Computer.add(Player.get(2));
            Computer.add(Player.get(3));
            Player.remove(0);
            Player.remove(0);
            Player.remove(0);
            Player.remove(0);
        }
    }

    /*
    uses the ranks to assign points to the cards
    aces high
     */
    static int determineValue(String s) {
        int points = 1;
        if (s.contains("Ace")) {
            points = 14;
            return points;
        }
        if (s.contains("King")) {
            points = 13;
            return points;
        }
        if (s.contains("Queen")) {
            points = 12;
            return points;
        }
        if (s.contains("Jack")) {
            points = 11;
            return points;
        }
        if (s.contains("10")) {
            points = 10;
            return points;
        }
        if (s.contains("9")) {
            points = 9;
            return points;
        }

        if (s.contains("8")) {
            points = 8;
            return points;
        }
        if (s.contains("7")) {
            points = 7;
            return points;
        }
        if (s.contains("6")) {
            points = 6;
            return points;
        }
        if (s.contains("5")) {
            points = 5;
            return points;
        }
        if (s.contains("4")) {
            points = 4;
            return points;
        }
        if (s.contains("3")) {
            points = 3;
            return points;
        }
        if (s.contains("2")) {
            points = 2;
            return points;
        } else {
            return points;
        }
    }

    static void delay(int sec) {
        try {              // add time delay for better animation
            
            TimeUnit.SECONDS.sleep(sec);
        } catch (InterruptedException e) {

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button blackJack;
    private java.awt.Label computerCard;
    private java.awt.Label computerCardCount;
    private java.awt.Label computerOne;
    private javax.swing.JButton drawCard;
    private java.awt.Label mainDisplay;
    private javax.swing.JToggleButton playWar;
    private java.awt.Label playerOne;
    private java.awt.Label playerOneCard;
    private java.awt.Label playerOneCardCount;
    private java.awt.Button startWar;
    // End of variables declaration//GEN-END:variables
}
